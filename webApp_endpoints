Entry Point	        <--->                       Description     <--->	                      	Example <--->												Common Vulnerability <--->	Vulnerability Example <--->	Testing Method 
Login Forms <--->	        	Areas where users enter credentials to access accounts.<--->		/login or /user/signin								SQL Injection	username' OR '1'='1' --	Test for weak passwords and brute force attacks.
Registration Forms <--->		Pages for new users to create accounts. <--->	                	/register or /user/signup							Cross-Site Scripting (XSS)	<script>alert('XSS')</script>	Validate input to ensure proper sanitization.
Search Functionality <--->	Input fields that allow users to search for content. <--->      /search?q=keyword											Reflected XSS	/search?q=<script>alert(1)</script>	Inject scripts to test for XSS vulnerabilities.
File Uploads <--->	    Forms that permit users to upload files. <--->	                    /upload or /profile/upload-				    image	Remote Code Execution (RCE)	Uploading a .php file that executes code	Attempt to upload malicious files.
Contact Forms <--->	        Forms used for user inquiries or feedback submissions. <--->		/contact or /support									Email Injection	name=test&email=test@example.com%0ARecipient: admin@example.com	Test for header injections.
API Endpoints <--->	        URLs exposing application functionalities via API.	<--->       /api/v1/users or /api/v1/products			Insecure Direct Object Reference (IDOR)	Accessing another user’s data via /api/v1/users/2	Manipulate IDs in requests to test for IDOR vulnerabilities.
Comment Sections <--->	    Areas where users can leave comments or feedback. <--->	        /blog/post?id=123											Stored XSS	Commenting with <script>alert('XSS')</script>	Test comments for XSS injection.
Payment Processing <--->		Pages for processing payments or handling transactions. <--->		/checkout or /payment									CSRF (Cross-Site Request Forgery)	Making unauthorized payments through crafted requests	Use CSRF tokens to test against CSRF vulnerabilities.
Admin Panels <--->	        Interfaces for administrators to manage the application. <--->	/admin or /dashboard									Broken Access Control	Accessing /admin/users without authentication	Check for unauthorized access to admin functionalities.
Profile Pages	<--->       	User-specific pages displaying account details. <--->	        	/profile or /user/settings						Insecure Direct Object Reference (IDOR)	Viewing another user’s profile by manipulating the URL	Manipulate parameters to access other users' profiles.
Redirects	<--->          	 	Links that redirect to other resources or pages. <--->	        /redirect?url=http://malicious-site.com	Open Redirect	Redirecting to a malicious site via manipulated url parameter	Test redirect functionality with untrusted URLs.
Cookie Settings	<--->       Options for users to manage cookies or preferences. <--->	    	/cookie-policy or /settings/cookies		Session Fixation	Exploiting session IDs to hijack user sessions	Test session management and cookie security.
Third-Party Integrations		External services integrated into the application. <--->        /auth/google or /oauth/facebook				OAuth Misconfiguration	Using a compromised redirect URI to access tokens	Test for proper handling of redirect URIs.
Help/FAQ Sections <--->	    Pages providing user support and common questions. <--->	    	/help or /faq												I	nformation Disclosure	Exposing sensitive system information through FAQs	Review FAQs for exposure of sensitive info.
Admin APIs <--->	        	APIs designed for administrative tasks. <--->	                	/admin/api/v1/users										Unauthenticated Access	Accessing sensitive admin functions without credentials	Test for access control on admin APIs.
Unprotected Pages <--->	    Pages accessible without authentication. <--->	                /public-data													Unprotected Access	Accessing sensitive data without login	Use scanners like Burp Suite to find unprotected pages.
Unvalidated User Input  <-> User input that is not properly sanitized. <--->	            	Various input fields									SQL Injection, Command Injection, XSS	Injecting SQL commands or scripts into inputs	Test for injection vulnerabilities by injecting payloads.
Broken Authentication   <-> Improperly implemented authentication mechanisms. <--->	        Login/registration processes					Weak Passwords	Users with weak passwords easily compromised	Test for weak passwords and missing security headers.
Clickjacking	<--->       	Trick users into clicking hidden elements. <--->	           		N/A	Clickjacking											User clicks on a disguised button	Test by embedding the page in an iframe and manipulating layout.
Insecure Communication ---> Insecure protocols or unencrypted connections. <--->	        	Use of FTP, Telnet										Data Exposure	Sensitive data transmitted without encryption	Test for insecure communication channels and recommend secure alternatives.
Missing Security Headers <- Missing headers to mitigate web attacks. <--->                 	N/A																		Information Disclosure	Potential for attacks like XSS, clickjacking	Use tools like Burp Suite to scan for missing security headers.
Unencrypted Sensitive Data  Data that should be encrypted but is not. <--->	               	API responses, database queries				Data Exposure	Sensitive data visible in transit	Check for HTTPS and weak encryption methods.
Insecure File Uploads	<-> Allows uploading of malicious files. <--->	                   		/upload																RCE, Unrestricted File Upload	Uploading an executable or script file	Test by uploading various file types.
Server-Side Request Forgery (SSRF) | Ability to make unauthorized requests from the server | API calls or internal requests				SSRF	Accessing internal resources from the server	Manipulate URL parameters to test for SSRF vulnerabilities.
Cross-Site Scripting (XSS) | Vulnerabilities allowing injecting malicious scripts.|					Various input fields									XSS	Injecting <script>alert('XSS')</script>	Inject scripts into input fields to test for XSS vulnerabilities.
Insecure Direct Object References |	URLs that can be manipulated to access unauthorized resources.|/resource?id=123								IDOR	Accessing resource with ID 124 instead of 123	Change IDs in the URL to check for access control.
